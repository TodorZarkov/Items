// <auto-generated />
using System;
using Items.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace Items.Data.Migrations
{
    [DbContext(typeof(ItemsDbContext))]
    [Migration("20231122105954_userEmailUnique")]
    partial class userEmailUnique
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Items.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RotationItemsDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Items.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatorId = new Guid("04023b09-a38e-48e1-1082-08db8d0db110"),
                            Name = "Various"
                        },
                        new
                        {
                            Id = 2,
                            CreatorId = new Guid("04023b09-a38e-48e1-1082-08db8d0db110"),
                            Name = "Toys"
                        },
                        new
                        {
                            Id = 3,
                            CreatorId = new Guid("04023b09-a38e-48e1-1082-08db8d0db110"),
                            Name = "Cars"
                        },
                        new
                        {
                            Id = 4,
                            CreatorId = new Guid("04023b09-a38e-48e1-1082-08db8d0db110"),
                            Name = "Weapons"
                        },
                        new
                        {
                            Id = 5,
                            CreatorId = new Guid("04023b09-a38e-48e1-1082-08db8d0db110"),
                            Name = "Puzzles"
                        },
                        new
                        {
                            Id = 6,
                            CreatorId = new Guid("7bee3220-a1a1-4502-efea-08db9037bc59"),
                            Name = "Instruments"
                        });
                });

            modelBuilder.Entity("Items.Data.Models.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BarterDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("BarterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BarterName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BarterPictureUri")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<decimal>("BarterQuantity")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("BarterUnitId")
                        .HasColumnType("int");

                    b.Property<string>("BuyerComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("BuyerEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuyerName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("BuyerOk")
                        .HasColumnType("bit");

                    b.Property<string>("BuyerPhone")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("BuyerReceived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ContractDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeliverDue")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ItemDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ItemPictureUri")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("SellerComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SellerEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SellerName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("SellerOk")
                        .HasColumnType("bit");

                    b.Property<string>("SellerPhone")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("SellerReceived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SendDue")
                        .HasColumnType("datetime2");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BarterId");

                    b.HasIndex("BarterUnitId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ItemId");

                    b.HasIndex("SellerId");

                    b.HasIndex("UnitId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Items.Data.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsoCode = "USD",
                            Name = "United States dollar",
                            Symbol = "$"
                        },
                        new
                        {
                            Id = 2,
                            IsoCode = "EUR",
                            Name = "Euro",
                            Symbol = "€"
                        },
                        new
                        {
                            Id = 3,
                            IsoCode = "BGN",
                            Name = "Bulgarian lev",
                            Symbol = "Lev"
                        });
                });

            modelBuilder.Entity("Items.Data.Models.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Items.Data.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AcquiredDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("AcquiredPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<decimal?>("CurrentPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndSell")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsAuction")
                        .HasColumnType("bit");

                    b.Property<Guid>("ItemVisibilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MainPictureUri")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("OnRotation")
                        .HasColumnType("bit");

                    b.Property<bool>("OnRotationNow")
                        .HasColumnType("bit");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<decimal>("PromisedQuantity")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTime?>("StartSell")
                        .HasColumnType("datetime2");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ItemVisibilityId")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("UnitId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = new Guid("70ab6375-3da7-41cb-b80c-dcee2ba4fbbb"),
                            AcquiredDate = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AcquiredPrice = 60m,
                            AddedOn = new DateTime(2023, 11, 22, 10, 59, 52, 854, DateTimeKind.Utc).AddTicks(7529),
                            CurrencyId = 1,
                            CurrentPrice = 55m,
                            Deleted = false,
                            Description = "The Ford Mustang Mach 1 is a performance-oriented option package[1] of the Ford Mustang muscle car, originally introduced in August 1968 for the 1969 model year. It was available until 1978, returned briefly in 2003, 2004, and most recently in 2021.\r\n\r\nAs part of a Ford heritage program, the Mach 1 package returned in 2003 as a high-performance version of the New Edge platform. Visual connections to the 1969 model were integrated into the design to pay homage to the original. This generation of the Mach 1 was discontinued after the 2004 model year, with the introduction of the fifth generation Mustang.\r\n\r\nFord first used the name \"Mach 1\" in its 1969 display of a concept called the \"Levacar Mach I\" at the Ford Rotunda. This concept vehicle used a cushion of air as propulsion on a circular dais. ",
                            EndSell = new DateTime(2024, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAuction = true,
                            ItemVisibilityId = new Guid("8d725141-2b5a-468f-9e1e-61ab0c7f8f5e"),
                            LocationId = new Guid("f9182575-b31f-4d24-bb44-17a062dfe6fe"),
                            MainPictureUri = "https://i5.walmartimages.com/asr/19fe13d7-ea2e-47f7-8547-202ce8c88717_1.bc800cefd11bb60ebc07ebdd7fac8ff6.jpeg",
                            ModifiedOn = new DateTime(2023, 11, 22, 10, 59, 52, 854, DateTimeKind.Utc).AddTicks(7532),
                            Name = "Ford Mustang Mach1 1973",
                            OnRotation = true,
                            OnRotationNow = false,
                            OwnerId = new Guid("7bee3220-a1a1-4502-efea-08db9037bc59"),
                            PlaceId = 1,
                            PromisedQuantity = 0m,
                            Quantity = 1m,
                            StartSell = new DateTime(2023, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnitId = 1
                        },
                        new
                        {
                            Id = new Guid("e4d2697e-8edf-49f5-bac0-bc76dfbb43ee"),
                            AcquiredDate = new DateTime(2022, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AcquiredPrice = 10m,
                            AddedOn = new DateTime(2023, 11, 22, 10, 59, 52, 854, DateTimeKind.Utc).AddTicks(7643),
                            CurrencyId = 1,
                            CurrentPrice = 55m,
                            Deleted = false,
                            Description = "Very cool small SUV",
                            EndSell = new DateTime(2024, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ItemVisibilityId = new Guid("a78c2eda-79cb-4acc-a7e4-92e0b45e20eb"),
                            LocationId = new Guid("f9182575-b31f-4d24-bb44-17a062dfe6fe"),
                            MainPictureUri = "https://image.pushauction.com/0/0/77191e32-26bc-45d1-b916-1425f6513281/4533eb18-a6eb-4783-b444-aad16f842869.jpg",
                            ModifiedOn = new DateTime(2023, 11, 22, 10, 59, 52, 854, DateTimeKind.Utc).AddTicks(7643),
                            Name = "Toyota Rav 4",
                            OnRotation = true,
                            OnRotationNow = false,
                            OwnerId = new Guid("7bee3220-a1a1-4502-efea-08db9037bc59"),
                            PlaceId = 1,
                            PromisedQuantity = 0m,
                            Quantity = 1m,
                            StartSell = new DateTime(2023, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnitId = 1
                        },
                        new
                        {
                            Id = new Guid("ea486471-25ca-40c5-bdce-c7c4157eb1b0"),
                            AcquiredDate = new DateTime(2022, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AcquiredPrice = 11m,
                            AddedOn = new DateTime(2023, 11, 22, 10, 59, 52, 854, DateTimeKind.Utc).AddTicks(7680),
                            CurrencyId = 1,
                            CurrentPrice = 55m,
                            Deleted = false,
                            Description = "Old Cardboard Vehicle from GDR",
                            EndSell = new DateTime(2024, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ItemVisibilityId = new Guid("0fb06c25-8e6f-4fd2-a1d9-3cebb4621d2e"),
                            LocationId = new Guid("f9182575-b31f-4d24-bb44-17a062dfe6fe"),
                            MainPictureUri = "https://static2.redcart.pl/templates/images/thumb/10281/800/9999/pl/0/templates/images/products/10281/067a782229f0ab90838b869e943673ca.jpg",
                            ModifiedOn = new DateTime(2023, 11, 22, 10, 59, 52, 854, DateTimeKind.Utc).AddTicks(7680),
                            Name = "Trabant",
                            OnRotation = true,
                            OnRotationNow = false,
                            OwnerId = new Guid("7bee3220-a1a1-4502-efea-08db9037bc59"),
                            PlaceId = 1,
                            PromisedQuantity = 0m,
                            Quantity = 1m,
                            StartSell = new DateTime(2023, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnitId = 1
                        },
                        new
                        {
                            Id = new Guid("2aa8b934-59f3-473b-842e-3df2a3590b92"),
                            AcquiredDate = new DateTime(2020, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AcquiredPrice = 22m,
                            AddedOn = new DateTime(2023, 11, 22, 10, 59, 52, 854, DateTimeKind.Utc).AddTicks(7700),
                            CurrencyId = 1,
                            Deleted = false,
                            Description = "The Porsche 911 (pronounced Nine Eleven or in German: Neunelf) is a two-door 2+2 high performance rear-engined sports car introduced in September 1964 by Porsche AG of Stuttgart, Germany. It has a rear-mounted flat-six engine and originally a torsion bar suspension. The car has been continuously enhanced through the years but the basic concept has remained unchanged.[1] The engines were air-cooled until the introduction of the 996 series in 1998.[",
                            ItemVisibilityId = new Guid("a33dd8ed-4619-4d18-a25c-2bb25b7bb456"),
                            LocationId = new Guid("f9182575-b31f-4d24-bb44-17a062dfe6fe"),
                            MainPictureUri = "https://i5.walmartimages.com/asr/0b26c2b4-5459-424c-ae09-364824104c90_1.642441b6196644f95b66202bb6185285.jpeg?odnWidth=1000&odnHeight=1000&odnBg=ffffff",
                            ModifiedOn = new DateTime(2023, 11, 22, 10, 59, 52, 854, DateTimeKind.Utc).AddTicks(7700),
                            Name = "1997 Porsche 911 Carrera, Red",
                            OnRotation = true,
                            OnRotationNow = false,
                            OwnerId = new Guid("7bee3220-a1a1-4502-efea-08db9037bc59"),
                            PlaceId = 1,
                            PromisedQuantity = 0m,
                            Quantity = 1m,
                            UnitId = 1
                        },
                        new
                        {
                            Id = new Guid("7ec3d946-d2ef-4d54-a98e-00ea2b2e8b45"),
                            AcquiredDate = new DateTime(2020, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AcquiredPrice = 23m,
                            AddedOn = new DateTime(2023, 11, 22, 10, 59, 52, 854, DateTimeKind.Utc).AddTicks(7710),
                            CurrencyId = 1,
                            Deleted = false,
                            Description = "Hollywood Rides 1:24 Scale 2006",
                            ItemVisibilityId = new Guid("d009129e-5655-4cd2-ba67-114e2e792b8c"),
                            LocationId = new Guid("f9182575-b31f-4d24-bb44-17a062dfe6fe"),
                            MainPictureUri = "https://i5.walmartimages.com/asr/ea368e4c-f0e3-401b-8cff-2344a05955ed_2.de437c99da79acc1cc2bec706fea7ce4.jpeg",
                            ModifiedOn = new DateTime(2023, 11, 22, 10, 59, 52, 854, DateTimeKind.Utc).AddTicks(7711),
                            Name = "Chevrolet Camaro",
                            OnRotation = true,
                            OnRotationNow = false,
                            OwnerId = new Guid("7bee3220-a1a1-4502-efea-08db9037bc59"),
                            PlaceId = 2,
                            PromisedQuantity = 0m,
                            Quantity = 1m,
                            UnitId = 1
                        },
                        new
                        {
                            Id = new Guid("ea9141c8-8c5b-4126-9a30-7a82796e922c"),
                            AcquiredDate = new DateTime(2021, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AcquiredPrice = 110m,
                            AddedOn = new DateTime(2023, 11, 22, 10, 59, 52, 854, DateTimeKind.Utc).AddTicks(7726),
                            CurrencyId = 1,
                            CurrentPrice = 55m,
                            Deleted = false,
                            Description = "Brown - Welly 24008 - 1/24 scale",
                            EndSell = new DateTime(2024, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAuction = true,
                            ItemVisibilityId = new Guid("c0bbcabf-5c24-4ca6-86bc-eca11ae46eb8"),
                            LocationId = new Guid("6e1f7be8-13dc-4c6b-bb59-d6ee7cec35d8"),
                            MainPictureUri = "https://i5.walmartimages.com/asr/cb1717c7-d4b2-483b-91a9-770f3db40076_1.1f5d5f997641b1adb8323d08d95e6bd6.jpeg",
                            ModifiedOn = new DateTime(2023, 11, 22, 10, 59, 52, 854, DateTimeKind.Utc).AddTicks(7727),
                            Name = "Land Rover Discovery",
                            OnRotation = true,
                            OnRotationNow = false,
                            OwnerId = new Guid("8b5b3b04-bf70-4018-ffbf-08db913996c1"),
                            PlaceId = 3,
                            PromisedQuantity = 0m,
                            Quantity = 1m,
                            StartSell = new DateTime(2023, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnitId = 1
                        },
                        new
                        {
                            Id = new Guid("cc1a92ff-e773-4d37-8d66-ddb31ab612b2"),
                            AcquiredDate = new DateTime(2021, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AcquiredPrice = 8m,
                            AddedOn = new DateTime(2023, 11, 22, 10, 59, 52, 854, DateTimeKind.Utc).AddTicks(7745),
                            CurrencyId = 1,
                            CurrentPrice = 55m,
                            Deleted = false,
                            Description = "Puzzle from cars movie. 500pcs",
                            EndSell = new DateTime(2024, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ItemVisibilityId = new Guid("61c89a18-8bda-4d12-9a70-cdb17aedd752"),
                            LocationId = new Guid("6e1f7be8-13dc-4c6b-bb59-d6ee7cec35d8"),
                            MainPictureUri = "http://www.babylonhobbies.com/ebay/pictures/EDU_14862.jpg",
                            ModifiedOn = new DateTime(2023, 11, 22, 10, 59, 52, 854, DateTimeKind.Utc).AddTicks(7745),
                            Name = "Puzzle Cars",
                            OnRotation = true,
                            OnRotationNow = false,
                            OwnerId = new Guid("8b5b3b04-bf70-4018-ffbf-08db913996c1"),
                            PlaceId = 4,
                            PromisedQuantity = 0m,
                            Quantity = 1m,
                            StartSell = new DateTime(2023, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnitId = 1
                        },
                        new
                        {
                            Id = new Guid("a0f0c44b-1ba4-484d-9c36-498579b61d37"),
                            AcquiredDate = new DateTime(2021, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AcquiredPrice = 9m,
                            AddedOn = new DateTime(2023, 11, 22, 10, 59, 52, 854, DateTimeKind.Utc).AddTicks(7765),
                            CurrencyId = 1,
                            Deleted = false,
                            Description = "Hape knob puzzle vehicles",
                            ItemVisibilityId = new Guid("cbd7bd12-aa21-4e33-95cf-fd9c342db010"),
                            LocationId = new Guid("6e1f7be8-13dc-4c6b-bb59-d6ee7cec35d8"),
                            MainPictureUri = "https://www.kids-room.com/WebRoot/KidsroomDE/Shops/Kidsroom/55B8/CACC/36F4/5060/F31B/4DEB/AE1C/138D/BILD3_E6319/IC_IMAGE/en-hape-knob-puzzle-vehicles.jpg",
                            ModifiedOn = new DateTime(2023, 11, 22, 10, 59, 52, 854, DateTimeKind.Utc).AddTicks(7766),
                            Name = "puzzle vehicles",
                            OnRotation = true,
                            OnRotationNow = false,
                            OwnerId = new Guid("8b5b3b04-bf70-4018-ffbf-08db913996c1"),
                            PlaceId = 4,
                            PromisedQuantity = 0m,
                            Quantity = 1m,
                            UnitId = 1
                        },
                        new
                        {
                            Id = new Guid("a676af29-2fd2-4e17-918d-73ec948cdc73"),
                            AcquiredDate = new DateTime(2022, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AcquiredPrice = 50m,
                            AddedOn = new DateTime(2023, 11, 22, 10, 59, 52, 854, DateTimeKind.Utc).AddTicks(7775),
                            CurrencyId = 1,
                            Deleted = false,
                            ItemVisibilityId = new Guid("49abfa42-69f7-4240-a2ef-4e1b3ef7c16c"),
                            LocationId = new Guid("6e1f7be8-13dc-4c6b-bb59-d6ee7cec35d8"),
                            MainPictureUri = "https://jigsawpuzzles.online/king-include/uploads1/auto-cadillac-oldtimer-classic-vehicle-chrome-607938272.jpg",
                            ModifiedOn = new DateTime(2023, 11, 22, 10, 59, 52, 854, DateTimeKind.Utc).AddTicks(7776),
                            Name = "Puzzle Cadillac",
                            OnRotation = true,
                            OnRotationNow = false,
                            OwnerId = new Guid("8b5b3b04-bf70-4018-ffbf-08db913996c1"),
                            PlaceId = 4,
                            PromisedQuantity = 0m,
                            Quantity = 1m,
                            UnitId = 1
                        });
                });

            modelBuilder.Entity("Items.Data.Models.ItemCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemsCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = 2,
                            ItemId = new Guid("70ab6375-3da7-41cb-b80c-dcee2ba4fbbb")
                        },
                        new
                        {
                            CategoryId = 3,
                            ItemId = new Guid("70ab6375-3da7-41cb-b80c-dcee2ba4fbbb")
                        },
                        new
                        {
                            CategoryId = 2,
                            ItemId = new Guid("e4d2697e-8edf-49f5-bac0-bc76dfbb43ee")
                        },
                        new
                        {
                            CategoryId = 3,
                            ItemId = new Guid("e4d2697e-8edf-49f5-bac0-bc76dfbb43ee")
                        },
                        new
                        {
                            CategoryId = 2,
                            ItemId = new Guid("ea486471-25ca-40c5-bdce-c7c4157eb1b0")
                        },
                        new
                        {
                            CategoryId = 3,
                            ItemId = new Guid("ea486471-25ca-40c5-bdce-c7c4157eb1b0")
                        },
                        new
                        {
                            CategoryId = 2,
                            ItemId = new Guid("2aa8b934-59f3-473b-842e-3df2a3590b92")
                        },
                        new
                        {
                            CategoryId = 3,
                            ItemId = new Guid("2aa8b934-59f3-473b-842e-3df2a3590b92")
                        },
                        new
                        {
                            CategoryId = 2,
                            ItemId = new Guid("7ec3d946-d2ef-4d54-a98e-00ea2b2e8b45")
                        },
                        new
                        {
                            CategoryId = 3,
                            ItemId = new Guid("7ec3d946-d2ef-4d54-a98e-00ea2b2e8b45")
                        },
                        new
                        {
                            CategoryId = 2,
                            ItemId = new Guid("ea9141c8-8c5b-4126-9a30-7a82796e922c")
                        },
                        new
                        {
                            CategoryId = 3,
                            ItemId = new Guid("ea9141c8-8c5b-4126-9a30-7a82796e922c")
                        },
                        new
                        {
                            CategoryId = 2,
                            ItemId = new Guid("cc1a92ff-e773-4d37-8d66-ddb31ab612b2")
                        },
                        new
                        {
                            CategoryId = 5,
                            ItemId = new Guid("cc1a92ff-e773-4d37-8d66-ddb31ab612b2")
                        },
                        new
                        {
                            CategoryId = 3,
                            ItemId = new Guid("cc1a92ff-e773-4d37-8d66-ddb31ab612b2")
                        },
                        new
                        {
                            CategoryId = 2,
                            ItemId = new Guid("a0f0c44b-1ba4-484d-9c36-498579b61d37")
                        },
                        new
                        {
                            CategoryId = 5,
                            ItemId = new Guid("a0f0c44b-1ba4-484d-9c36-498579b61d37")
                        },
                        new
                        {
                            CategoryId = 3,
                            ItemId = new Guid("a0f0c44b-1ba4-484d-9c36-498579b61d37")
                        },
                        new
                        {
                            CategoryId = 2,
                            ItemId = new Guid("a676af29-2fd2-4e17-918d-73ec948cdc73")
                        },
                        new
                        {
                            CategoryId = 5,
                            ItemId = new Guid("a676af29-2fd2-4e17-918d-73ec948cdc73")
                        },
                        new
                        {
                            CategoryId = 3,
                            ItemId = new Guid("a676af29-2fd2-4e17-918d-73ec948cdc73")
                        });
                });

            modelBuilder.Entity("Items.Data.Models.ItemVisibility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AcquireDocument")
                        .HasColumnType("int");

                    b.Property<int>("AcquiredDate")
                        .HasColumnType("int");

                    b.Property<int>("AcquiredPrice")
                        .HasColumnType("int");

                    b.Property<int>("AddedOn")
                        .HasColumnType("int");

                    b.Property<int>("Description")
                        .HasColumnType("int");

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedOn")
                        .HasColumnType("int");

                    b.Property<int>("Offers")
                        .HasColumnType("int");

                    b.Property<int>("Owner")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ItemVisibilities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d725141-2b5a-468f-9e1e-61ab0c7f8f5e"),
                            AcquireDocument = 1,
                            AcquiredDate = 1,
                            AcquiredPrice = 1,
                            AddedOn = 1,
                            Description = 2,
                            Location = 1,
                            ModifiedOn = 1,
                            Offers = 1,
                            Owner = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("a78c2eda-79cb-4acc-a7e4-92e0b45e20eb"),
                            AcquireDocument = 1,
                            AcquiredDate = 1,
                            AcquiredPrice = 1,
                            AddedOn = 1,
                            Description = 2,
                            Location = 1,
                            ModifiedOn = 1,
                            Offers = 1,
                            Owner = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("0fb06c25-8e6f-4fd2-a1d9-3cebb4621d2e"),
                            AcquireDocument = 1,
                            AcquiredDate = 1,
                            AcquiredPrice = 1,
                            AddedOn = 1,
                            Description = 2,
                            Location = 1,
                            ModifiedOn = 1,
                            Offers = 1,
                            Owner = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("a33dd8ed-4619-4d18-a25c-2bb25b7bb456"),
                            AcquireDocument = 1,
                            AcquiredDate = 1,
                            AcquiredPrice = 1,
                            AddedOn = 1,
                            Description = 2,
                            Location = 1,
                            ModifiedOn = 1,
                            Offers = 1,
                            Owner = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("d009129e-5655-4cd2-ba67-114e2e792b8c"),
                            AcquireDocument = 1,
                            AcquiredDate = 1,
                            AcquiredPrice = 1,
                            AddedOn = 1,
                            Description = 2,
                            Location = 1,
                            ModifiedOn = 1,
                            Offers = 1,
                            Owner = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("c0bbcabf-5c24-4ca6-86bc-eca11ae46eb8"),
                            AcquireDocument = 1,
                            AcquiredDate = 1,
                            AcquiredPrice = 1,
                            AddedOn = 1,
                            Description = 2,
                            Location = 1,
                            ModifiedOn = 1,
                            Offers = 1,
                            Owner = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("61c89a18-8bda-4d12-9a70-cdb17aedd752"),
                            AcquireDocument = 1,
                            AcquiredDate = 1,
                            AcquiredPrice = 1,
                            AddedOn = 1,
                            Description = 2,
                            Location = 1,
                            ModifiedOn = 1,
                            Offers = 1,
                            Owner = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("cbd7bd12-aa21-4e33-95cf-fd9c342db010"),
                            AcquireDocument = 1,
                            AcquiredDate = 1,
                            AcquiredPrice = 1,
                            AddedOn = 1,
                            Description = 2,
                            Location = 1,
                            ModifiedOn = 1,
                            Offers = 1,
                            Owner = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("49abfa42-69f7-4240-a2ef-4e1b3ef7c16c"),
                            AcquireDocument = 1,
                            AcquiredDate = 1,
                            AcquiredPrice = 1,
                            AddedOn = 1,
                            Description = 2,
                            Location = 1,
                            ModifiedOn = 1,
                            Offers = 1,
                            Owner = 1,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("Items.Data.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Geometry>("Border")
                        .HasColumnType("geography");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Point>("GeoLocation")
                        .HasColumnType("geography");

                    b.Property<Guid>("LocationVisibilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Town")
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LocationVisibilityId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9182575-b31f-4d24-bb44-17a062dfe6fe"),
                            Address = "bul. Slivnitsa 8",
                            Country = "Bulgaria",
                            LocationVisibilityId = new Guid("bcf0602c-9f4d-4ca0-8403-460e9dbd6a75"),
                            Name = "Вкъщи",
                            Town = "Sofia",
                            UserId = new Guid("7bee3220-a1a1-4502-efea-08db9037bc59")
                        },
                        new
                        {
                            Id = new Guid("6e1f7be8-13dc-4c6b-bb59-d6ee7cec35d8"),
                            Address = "bul. Slivnitsa 9",
                            Country = "Bulgaria",
                            LocationVisibilityId = new Guid("21bb8f90-6e2a-4464-b97f-d051e697c278"),
                            Name = "У нас",
                            Town = "Sofia",
                            UserId = new Guid("8b5b3b04-bf70-4018-ffbf-08db913996c1")
                        });
                });

            modelBuilder.Entity("Items.Data.Models.LocationVisibility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Address")
                        .HasColumnType("int");

                    b.Property<int>("Border")
                        .HasColumnType("int");

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<int>("Description")
                        .HasColumnType("int");

                    b.Property<int>("GeoLocation")
                        .HasColumnType("int");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<int>("Town")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LocationVisibilities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bcf0602c-9f4d-4ca0-8403-460e9dbd6a75"),
                            Address = 1,
                            Border = 1,
                            Country = 2,
                            Description = 1,
                            GeoLocation = 1,
                            Name = 1,
                            Town = 2
                        },
                        new
                        {
                            Id = new Guid("21bb8f90-6e2a-4464-b97f-d051e697c278"),
                            Address = 1,
                            Border = 1,
                            Country = 2,
                            Description = 1,
                            GeoLocation = 1,
                            Name = 1,
                            Town = 2
                        });
                });

            modelBuilder.Entity("Items.Data.Models.Offer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BarterItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("BarterQuantity")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<bool>("UseBuyerEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("UseBuyerName")
                        .HasColumnType("bit");

                    b.Property<bool>("UseBuyerPhone")
                        .HasColumnType("bit");

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Win")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BarterItemId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ItemId");

                    b.ToTable("Offers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("71f73811-33dc-45a8-a3fe-a7d5a2363833"),
                            BuyerId = new Guid("8b5b3b04-bf70-4018-ffbf-08db913996c1"),
                            CurrencyId = 1,
                            Expires = new DateTime(2024, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ItemId = new Guid("70ab6375-3da7-41cb-b80c-dcee2ba4fbbb"),
                            Quantity = 1m,
                            UseBuyerEmail = false,
                            UseBuyerName = false,
                            UseBuyerPhone = false,
                            Value = 60m,
                            Win = false
                        });
                });

            modelBuilder.Entity("Items.Data.Models.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Pictures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e63087e2-e37a-4e94-8ba8-e4751568d345"),
                            IsMain = true,
                            IsPrivate = false,
                            ItemId = new Guid("70ab6375-3da7-41cb-b80c-dcee2ba4fbbb"),
                            Uri = "https://i5.walmartimages.com/asr/19fe13d7-ea2e-47f7-8547-202ce8c88717_1.bc800cefd11bb60ebc07ebdd7fac8ff6.jpeg"
                        },
                        new
                        {
                            Id = new Guid("ffb2c420-acca-4346-9e99-0e52d44f9f50"),
                            IsMain = true,
                            IsPrivate = false,
                            ItemId = new Guid("e4d2697e-8edf-49f5-bac0-bc76dfbb43ee"),
                            Uri = "https://image.pushauction.com/0/0/77191e32-26bc-45d1-b916-1425f6513281/4533eb18-a6eb-4783-b444-aad16f842869.jpg"
                        },
                        new
                        {
                            Id = new Guid("fe43b7c3-8583-4f87-b6b4-8fa522072a17"),
                            IsMain = true,
                            IsPrivate = false,
                            ItemId = new Guid("ea486471-25ca-40c5-bdce-c7c4157eb1b0"),
                            Uri = "https://static2.redcart.pl/templates/images/thumb/10281/800/9999/pl/0/templates/images/products/10281/067a782229f0ab90838b869e943673ca.jpg"
                        },
                        new
                        {
                            Id = new Guid("78f32a40-2d8b-47ed-a424-0f757c4bd0fb"),
                            IsMain = true,
                            IsPrivate = false,
                            ItemId = new Guid("2aa8b934-59f3-473b-842e-3df2a3590b92"),
                            Uri = "https://i5.walmartimages.com/asr/0b26c2b4-5459-424c-ae09-364824104c90_1.642441b6196644f95b66202bb6185285.jpeg?odnWidth=1000&odnHeight=1000&odnBg=ffffff"
                        },
                        new
                        {
                            Id = new Guid("f2f7bd16-e413-4735-a550-0ca57628996d"),
                            IsMain = true,
                            IsPrivate = false,
                            ItemId = new Guid("7ec3d946-d2ef-4d54-a98e-00ea2b2e8b45"),
                            Uri = "https://i5.walmartimages.com/asr/ea368e4c-f0e3-401b-8cff-2344a05955ed_2.de437c99da79acc1cc2bec706fea7ce4.jpeg"
                        },
                        new
                        {
                            Id = new Guid("0e1db751-83fd-42e8-8c5d-e9d4a96a9a6c"),
                            IsMain = true,
                            IsPrivate = false,
                            ItemId = new Guid("ea9141c8-8c5b-4126-9a30-7a82796e922c"),
                            Uri = "https://i5.walmartimages.com/asr/cb1717c7-d4b2-483b-91a9-770f3db40076_1.1f5d5f997641b1adb8323d08d95e6bd6.jpeg"
                        },
                        new
                        {
                            Id = new Guid("a109510e-b303-479c-b1fe-a9b92967a057"),
                            IsMain = true,
                            IsPrivate = false,
                            ItemId = new Guid("cc1a92ff-e773-4d37-8d66-ddb31ab612b2"),
                            Uri = "http://www.babylonhobbies.com/ebay/pictures/EDU_14862.jpg"
                        },
                        new
                        {
                            Id = new Guid("7c7daf02-3d4e-4d0d-b42a-52f20f5f6206"),
                            IsMain = true,
                            IsPrivate = false,
                            ItemId = new Guid("a0f0c44b-1ba4-484d-9c36-498579b61d37"),
                            Uri = "https://www.kids-room.com/WebRoot/KidsroomDE/Shops/Kidsroom/55B8/CACC/36F4/5060/F31B/4DEB/AE1C/138D/BILD3_E6319/IC_IMAGE/en-hape-knob-puzzle-vehicles.jpg"
                        },
                        new
                        {
                            Id = new Guid("85a7cd2b-46d8-4c1f-b931-5b2047891d5b"),
                            IsMain = true,
                            IsPrivate = false,
                            ItemId = new Guid("a676af29-2fd2-4e17-918d-73ec948cdc73"),
                            Uri = "https://jigsawpuzzles.online/king-include/uploads1/auto-cadillac-oldtimer-classic-vehicle-chrome-607938272.jpg"
                        });
                });

            modelBuilder.Entity("Items.Data.Models.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Places");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LocationId = new Guid("f9182575-b31f-4d24-bb44-17a062dfe6fe"),
                            Name = "My Room, Cabinet,  Drawer 5"
                        },
                        new
                        {
                            Id = 2,
                            LocationId = new Guid("f9182575-b31f-4d24-bb44-17a062dfe6fe"),
                            Name = "My Room, Cabinet,  Drawer 6"
                        },
                        new
                        {
                            Id = 3,
                            LocationId = new Guid("6e1f7be8-13dc-4c6b-bb59-d6ee7cec35d8"),
                            Name = "My Room, Desk,  Drawer 1"
                        },
                        new
                        {
                            Id = 4,
                            LocationId = new Guid("6e1f7be8-13dc-4c6b-bb59-d6ee7cec35d8"),
                            Name = "My Room, Desk,  Drawer 2"
                        });
                });

            modelBuilder.Entity("Items.Data.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pieces",
                            Symbol = "pcs"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Meter",
                            Symbol = "m"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Square Meter",
                            Symbol = "m2"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Kilogram",
                            Symbol = "kg"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Items.Data.Models.Category", b =>
                {
                    b.HasOne("Items.Data.Models.ApplicationUser", "Creator")
                        .WithMany("Categories")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Items.Data.Models.Contract", b =>
                {
                    b.HasOne("Items.Data.Models.Item", "Barter")
                        .WithMany()
                        .HasForeignKey("BarterId");

                    b.HasOne("Items.Data.Models.Unit", "BarterUnit")
                        .WithMany()
                        .HasForeignKey("BarterUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Items.Data.Models.ApplicationUser", "Buyer")
                        .WithMany("ContractsAsBuyer")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.Item", "Item")
                        .WithMany("Contracts")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Items.Data.Models.ApplicationUser", "Seller")
                        .WithMany("ContractsAsSeller")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Barter");

                    b.Navigation("BarterUnit");

                    b.Navigation("Buyer");

                    b.Navigation("Currency");

                    b.Navigation("Item");

                    b.Navigation("Seller");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Items.Data.Models.Item", b =>
                {
                    b.HasOne("Items.Data.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Items.Data.Models.Document", "AcquireDocument")
                        .WithMany("Items")
                        .HasForeignKey("DocumentId");

                    b.HasOne("Items.Data.Models.ItemVisibility", "ItemVisibility")
                        .WithOne("Item")
                        .HasForeignKey("Items.Data.Models.Item", "ItemVisibilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.Location", "Location")
                        .WithMany("Items")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.ApplicationUser", "Owner")
                        .WithMany("Items")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.Place", "Place")
                        .WithMany("Items")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcquireDocument");

                    b.Navigation("Currency");

                    b.Navigation("ItemVisibility");

                    b.Navigation("Location");

                    b.Navigation("Owner");

                    b.Navigation("Place");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Items.Data.Models.ItemCategory", b =>
                {
                    b.HasOne("Items.Data.Models.Category", "Category")
                        .WithMany("ItemsCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.Item", "Item")
                        .WithMany("ItemsCategories")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Items.Data.Models.Location", b =>
                {
                    b.HasOne("Items.Data.Models.LocationVisibility", "LocationVisibility")
                        .WithOne("Location")
                        .HasForeignKey("Items.Data.Models.Location", "LocationVisibilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.ApplicationUser", "User")
                        .WithMany("Locations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LocationVisibility");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Items.Data.Models.Offer", b =>
                {
                    b.HasOne("Items.Data.Models.Item", "BarterItem")
                        .WithMany("AsBarterForOffers")
                        .HasForeignKey("BarterItemId");

                    b.HasOne("Items.Data.Models.ApplicationUser", "Buyer")
                        .WithMany("Offers")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.Item", "Item")
                        .WithMany("Offers")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BarterItem");

                    b.Navigation("Buyer");

                    b.Navigation("Currency");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Items.Data.Models.Picture", b =>
                {
                    b.HasOne("Items.Data.Models.Item", "Item")
                        .WithMany("Pictures")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Items.Data.Models.Place", b =>
                {
                    b.HasOne("Items.Data.Models.Location", "Location")
                        .WithMany("Places")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Items.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Items.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Items.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Items.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("ContractsAsBuyer");

                    b.Navigation("ContractsAsSeller");

                    b.Navigation("Items");

                    b.Navigation("Locations");

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Items.Data.Models.Category", b =>
                {
                    b.Navigation("ItemsCategories");
                });

            modelBuilder.Entity("Items.Data.Models.Document", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Items.Data.Models.Item", b =>
                {
                    b.Navigation("AsBarterForOffers");

                    b.Navigation("Contracts");

                    b.Navigation("ItemsCategories");

                    b.Navigation("Offers");

                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("Items.Data.Models.ItemVisibility", b =>
                {
                    b.Navigation("Item")
                        .IsRequired();
                });

            modelBuilder.Entity("Items.Data.Models.Location", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Places");
                });

            modelBuilder.Entity("Items.Data.Models.LocationVisibility", b =>
                {
                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("Items.Data.Models.Place", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
