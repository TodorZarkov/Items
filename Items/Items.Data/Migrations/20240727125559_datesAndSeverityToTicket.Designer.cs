// <auto-generated />
using System;
using Items.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace Items.Data.Migrations
{
    [DbContext(typeof(ItemsDbContext))]
    [Migration("20240727125559_datesAndSeverityToTicket")]
    partial class datesAndSeverityToTicket
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Items.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProfilePictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RotationItemsDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("04023b09-a38e-48e1-1082-08db8d0db110"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9037b4e-9232-4448-bf59-2e340aac49c6",
                            Email = "superadmin@items.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "SUPERADMIN@ITEMS.BG",
                            NormalizedUserName = "SUPERADMIN@ITEMS.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEIHifC3r0PVqrhIYb6LfG5qYlLrcdCJ0iJJDEE4EgmZdqCr4gyW9tj5DW+w1UecbGQ==",
                            PhoneNumberConfirmed = false,
                            RotationItemsDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "VG5NFKHCN2YOVRDWKLO4OC2UC5RDSZC2",
                            TwoFactorEnabled = false,
                            UserName = "superadmin@items.bg"
                        },
                        new
                        {
                            Id = new Guid("7bee3220-a1a1-4502-efea-08db9037bc59"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aea9a9f8-e1bb-40b5-a8d4-48ba39c8e336",
                            Email = "pesho@items.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "PESHO@ITEMS.COM",
                            NormalizedUserName = "PESHO@ITEMS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELjZNxDdI6HMnRsEMG7nCrOyJp15frbd5tDh/Ili3JQpAAhHYLS7a0lv+pWb4TNkeQ==",
                            PhoneNumberConfirmed = false,
                            RotationItemsDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "JMCTVP5CHQTQAB4TCG25FN2NPAKIWOFB",
                            TwoFactorEnabled = false,
                            UserName = "pesho@items.com"
                        },
                        new
                        {
                            Id = new Guid("8b5b3b04-bf70-4018-ffbf-08db913996c1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5a791e32-6035-4b8f-9100-ef55c918c980",
                            Email = "stamat@items.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "STAMAT@ITEMS.COM",
                            NormalizedUserName = "STAMAT@ITEMS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBlcplkeNgHZhIlf56jYu+eTGbkkAMawjUcy3qOLLCTOhq8Mk2whPFhciX+aAT5KpQ==",
                            PhoneNumberConfirmed = false,
                            RotationItemsDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "5NJNYJBBTCG5SWFQT2RSD7PJR746JEMM",
                            TwoFactorEnabled = false,
                            UserName = "stamat@items.com"
                        });
                });

            modelBuilder.Entity("Items.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatorId = new Guid("04023b09-a38e-48e1-1082-08db8d0db110"),
                            Name = "Various"
                        },
                        new
                        {
                            Id = 2,
                            CreatorId = new Guid("04023b09-a38e-48e1-1082-08db8d0db110"),
                            Name = "Toys"
                        },
                        new
                        {
                            Id = 3,
                            CreatorId = new Guid("04023b09-a38e-48e1-1082-08db8d0db110"),
                            Name = "Cars"
                        },
                        new
                        {
                            Id = 4,
                            CreatorId = new Guid("04023b09-a38e-48e1-1082-08db8d0db110"),
                            Name = "Weapons"
                        },
                        new
                        {
                            Id = 5,
                            CreatorId = new Guid("04023b09-a38e-48e1-1082-08db8d0db110"),
                            Name = "Puzzles"
                        },
                        new
                        {
                            Id = 6,
                            CreatorId = new Guid("7bee3220-a1a1-4502-efea-08db9037bc59"),
                            Name = "Instruments"
                        });
                });

            modelBuilder.Entity("Items.Data.Models.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BarterDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("BarterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BarterMainPictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BarterName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("BarterQuantity")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("BarterUnitId")
                        .HasColumnType("int");

                    b.Property<string>("BuyerComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("BuyerEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuyerName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("BuyerOk")
                        .HasColumnType("bit");

                    b.Property<string>("BuyerPhone")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("BuyerReceived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ContractDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeliverDue")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ItemDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemMainPictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("SellerComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SellerEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SellerName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("SellerOk")
                        .HasColumnType("bit");

                    b.Property<string>("SellerPhone")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("SellerReceived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SendDue")
                        .HasColumnType("datetime2");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BarterId");

                    b.HasIndex("BarterUnitId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ItemId");

                    b.HasIndex("SellerId");

                    b.HasIndex("UnitId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Items.Data.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsoCode = "USD",
                            Name = "United States dollar",
                            Symbol = "$"
                        },
                        new
                        {
                            Id = 2,
                            IsoCode = "EUR",
                            Name = "Euro",
                            Symbol = "€"
                        },
                        new
                        {
                            Id = 3,
                            IsoCode = "BGN",
                            Name = "Bulgarian lev",
                            Symbol = "Lev"
                        });
                });

            modelBuilder.Entity("Items.Data.Models.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Items.Data.Models.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Items.Data.Models.FileIdentifier", b =>
                {
                    b.Property<Guid>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BuyerContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SellerContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FileId");

                    b.HasIndex("BuyerContractId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ItemId");

                    b.HasIndex("SellerContractId");

                    b.HasIndex("UserId");

                    b.ToTable("FileIdentifiers");
                });

            modelBuilder.Entity("Items.Data.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AcquiredDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("AcquiredPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<decimal?>("CurrentPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndSell")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsAuction")
                        .HasColumnType("bit");

                    b.Property<Guid>("ItemVisibilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MainPictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("OnRotation")
                        .HasColumnType("bit");

                    b.Property<bool>("OnRotationNow")
                        .HasColumnType("bit");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<decimal>("PromisedQuantity")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTime?>("StartSell")
                        .HasColumnType("datetime2");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ItemVisibilityId")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("UnitId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Items.Data.Models.ItemCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemsCategories");
                });

            modelBuilder.Entity("Items.Data.Models.ItemVisibility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AcquireDocument")
                        .HasColumnType("int");

                    b.Property<int>("AcquiredDate")
                        .HasColumnType("int");

                    b.Property<int>("AcquiredPrice")
                        .HasColumnType("int");

                    b.Property<int>("AddedOn")
                        .HasColumnType("int");

                    b.Property<int>("Description")
                        .HasColumnType("int");

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedOn")
                        .HasColumnType("int");

                    b.Property<int>("Offers")
                        .HasColumnType("int");

                    b.Property<int>("Owner")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ItemVisibilities");
                });

            modelBuilder.Entity("Items.Data.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Geometry>("Border")
                        .HasColumnType("geography");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Point>("GeoLocation")
                        .HasColumnType("geography");

                    b.Property<Guid>("LocationVisibilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Town")
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LocationVisibilityId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9182575-b31f-4d24-bb44-17a062dfe6fe"),
                            Address = "bul. Slivnitsa 8",
                            Country = "Bulgaria",
                            LocationVisibilityId = new Guid("bcf0602c-9f4d-4ca0-8403-460e9dbd6a75"),
                            Name = "Вкъщи",
                            Town = "Sofia",
                            UserId = new Guid("7bee3220-a1a1-4502-efea-08db9037bc59")
                        },
                        new
                        {
                            Id = new Guid("6e1f7be8-13dc-4c6b-bb59-d6ee7cec35d8"),
                            Address = "bul. Slivnitsa 9",
                            Country = "Bulgaria",
                            LocationVisibilityId = new Guid("21bb8f90-6e2a-4464-b97f-d051e697c278"),
                            Name = "У нас",
                            Town = "Sofia",
                            UserId = new Guid("8b5b3b04-bf70-4018-ffbf-08db913996c1")
                        });
                });

            modelBuilder.Entity("Items.Data.Models.LocationVisibility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Address")
                        .HasColumnType("int");

                    b.Property<int>("Border")
                        .HasColumnType("int");

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<int>("Description")
                        .HasColumnType("int");

                    b.Property<int>("GeoLocation")
                        .HasColumnType("int");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<int>("Town")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LocationVisibilities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bcf0602c-9f4d-4ca0-8403-460e9dbd6a75"),
                            Address = 1,
                            Border = 1,
                            Country = 2,
                            Description = 1,
                            GeoLocation = 1,
                            Name = 1,
                            Town = 2
                        },
                        new
                        {
                            Id = new Guid("21bb8f90-6e2a-4464-b97f-d051e697c278"),
                            Address = 1,
                            Border = 1,
                            Country = 2,
                            Description = 1,
                            GeoLocation = 1,
                            Name = 1,
                            Town = 2
                        });
                });

            modelBuilder.Entity("Items.Data.Models.Offer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BarterItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("BarterQuantity")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<bool>("UseBuyerEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("UseBuyerName")
                        .HasColumnType("bit");

                    b.Property<bool>("UseBuyerPhone")
                        .HasColumnType("bit");

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Win")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BarterItemId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ItemId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("Items.Data.Models.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Places");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LocationId = new Guid("f9182575-b31f-4d24-bb44-17a062dfe6fe"),
                            Name = "My Room, Cabinet,  Drawer 5"
                        },
                        new
                        {
                            Id = 2,
                            LocationId = new Guid("f9182575-b31f-4d24-bb44-17a062dfe6fe"),
                            Name = "My Room, Cabinet,  Drawer 6"
                        },
                        new
                        {
                            Id = 3,
                            LocationId = new Guid("6e1f7be8-13dc-4c6b-bb59-d6ee7cec35d8"),
                            Name = "My Room, Desk,  Drawer 1"
                        },
                        new
                        {
                            Id = 4,
                            LocationId = new Guid("6e1f7be8-13dc-4c6b-bb59-d6ee7cec35d8"),
                            Name = "My Room, Desk,  Drawer 2"
                        });
                });

            modelBuilder.Entity("Items.Data.Models.SimilarTicketUser", b =>
                {
                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TicketId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SimilarTicketsUsers");
                });

            modelBuilder.Entity("Items.Data.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssigneeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SnapshotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("AssignerId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Items.Data.Models.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TicketStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Assign"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Close"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Delete"
                        });
                });

            modelBuilder.Entity("Items.Data.Models.TicketSubscriber", b =>
                {
                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubscriberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TicketId", "SubscriberId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("TicketsSubscribers");
                });

            modelBuilder.Entity("Items.Data.Models.TicketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TicketTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bug"
                        },
                        new
                        {
                            Id = 2,
                            Name = "NewCategory"
                        },
                        new
                        {
                            Id = 3,
                            Name = "NewCurrency"
                        },
                        new
                        {
                            Id = 4,
                            Name = "NewUnit"
                        });
                });

            modelBuilder.Entity("Items.Data.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.HasKey("Id");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pieces",
                            Symbol = "pcs"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Meter",
                            Symbol = "m"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Square Meter",
                            Symbol = "m2"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Kilogram",
                            Symbol = "kg"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8e078af-5cbc-4360-a99a-0aa387c563e1"),
                            ConcurrencyStamp = "8208B486-8D31-4E5C-8BB0-05FF07CF81E0",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("07ebfa14-da6f-471f-a29a-c3232eb436c9"),
                            ConcurrencyStamp = "F4C41BE7-D11A-4DE4-99FB-7C8C0C8C3A26",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("04023b09-a38e-48e1-1082-08db8d0db110"),
                            RoleId = new Guid("b8e078af-5cbc-4360-a99a-0aa387c563e1")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Items.Data.Models.Category", b =>
                {
                    b.HasOne("Items.Data.Models.ApplicationUser", "Creator")
                        .WithMany("Categories")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Items.Data.Models.Contract", b =>
                {
                    b.HasOne("Items.Data.Models.Item", "Barter")
                        .WithMany()
                        .HasForeignKey("BarterId");

                    b.HasOne("Items.Data.Models.Unit", "BarterUnit")
                        .WithMany()
                        .HasForeignKey("BarterUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Items.Data.Models.ApplicationUser", "Buyer")
                        .WithMany("ContractsAsBuyer")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.Item", "Item")
                        .WithMany("Contracts")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Items.Data.Models.ApplicationUser", "Seller")
                        .WithMany("ContractsAsSeller")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Barter");

                    b.Navigation("BarterUnit");

                    b.Navigation("Buyer");

                    b.Navigation("Currency");

                    b.Navigation("Item");

                    b.Navigation("Seller");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Items.Data.Models.FileIdentifier", b =>
                {
                    b.HasOne("Items.Data.Models.Contract", "BuyerContract")
                        .WithMany("ItemImages")
                        .HasForeignKey("BuyerContractId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Items.Data.Models.Document", "Document")
                        .WithMany("DocumentFiles")
                        .HasForeignKey("DocumentId");

                    b.HasOne("Items.Data.Models.Item", "Item")
                        .WithMany("ItemPictures")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Items.Data.Models.Contract", "SellerContract")
                        .WithMany("BarterImages")
                        .HasForeignKey("SellerContractId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Items.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("BuyerContract");

                    b.Navigation("Document");

                    b.Navigation("Item");

                    b.Navigation("SellerContract");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Items.Data.Models.Item", b =>
                {
                    b.HasOne("Items.Data.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Items.Data.Models.Document", "AcquireDocument")
                        .WithMany("Items")
                        .HasForeignKey("DocumentId");

                    b.HasOne("Items.Data.Models.ItemVisibility", "ItemVisibility")
                        .WithOne("Item")
                        .HasForeignKey("Items.Data.Models.Item", "ItemVisibilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.Location", "Location")
                        .WithMany("Items")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.ApplicationUser", "Owner")
                        .WithMany("Items")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.Place", "Place")
                        .WithMany("Items")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcquireDocument");

                    b.Navigation("Currency");

                    b.Navigation("ItemVisibility");

                    b.Navigation("Location");

                    b.Navigation("Owner");

                    b.Navigation("Place");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Items.Data.Models.ItemCategory", b =>
                {
                    b.HasOne("Items.Data.Models.Category", "Category")
                        .WithMany("ItemsCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.Item", "Item")
                        .WithMany("ItemsCategories")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Items.Data.Models.Location", b =>
                {
                    b.HasOne("Items.Data.Models.LocationVisibility", "LocationVisibility")
                        .WithOne("Location")
                        .HasForeignKey("Items.Data.Models.Location", "LocationVisibilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.ApplicationUser", "User")
                        .WithMany("Locations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LocationVisibility");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Items.Data.Models.Offer", b =>
                {
                    b.HasOne("Items.Data.Models.Item", "BarterItem")
                        .WithMany("AsBarterForOffers")
                        .HasForeignKey("BarterItemId");

                    b.HasOne("Items.Data.Models.ApplicationUser", "Buyer")
                        .WithMany("Offers")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.Item", "Item")
                        .WithMany("Offers")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BarterItem");

                    b.Navigation("Buyer");

                    b.Navigation("Currency");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Items.Data.Models.Place", b =>
                {
                    b.HasOne("Items.Data.Models.Location", "Location")
                        .WithMany("Places")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Items.Data.Models.SimilarTicketUser", b =>
                {
                    b.HasOne("Items.Data.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Items.Data.Models.Ticket", b =>
                {
                    b.HasOne("Items.Data.Models.ApplicationUser", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId");

                    b.HasOne("Items.Data.Models.ApplicationUser", "Assigner")
                        .WithMany()
                        .HasForeignKey("AssignerId");

                    b.HasOne("Items.Data.Models.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.TicketStatus", "TicketStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.TicketType", "TicketType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignee");

                    b.Navigation("Assigner");

                    b.Navigation("Author");

                    b.Navigation("TicketStatus");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("Items.Data.Models.TicketSubscriber", b =>
                {
                    b.HasOne("Items.Data.Models.ApplicationUser", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subscriber");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Items.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Items.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Items.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Items.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Items.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("ContractsAsBuyer");

                    b.Navigation("ContractsAsSeller");

                    b.Navigation("Items");

                    b.Navigation("Locations");

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Items.Data.Models.Category", b =>
                {
                    b.Navigation("ItemsCategories");
                });

            modelBuilder.Entity("Items.Data.Models.Contract", b =>
                {
                    b.Navigation("BarterImages");

                    b.Navigation("ItemImages");
                });

            modelBuilder.Entity("Items.Data.Models.Document", b =>
                {
                    b.Navigation("DocumentFiles");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Items.Data.Models.Item", b =>
                {
                    b.Navigation("AsBarterForOffers");

                    b.Navigation("Contracts");

                    b.Navigation("ItemPictures");

                    b.Navigation("ItemsCategories");

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Items.Data.Models.ItemVisibility", b =>
                {
                    b.Navigation("Item")
                        .IsRequired();
                });

            modelBuilder.Entity("Items.Data.Models.Location", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Places");
                });

            modelBuilder.Entity("Items.Data.Models.LocationVisibility", b =>
                {
                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("Items.Data.Models.Place", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
